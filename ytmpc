#!/bin/bash

VERBOSE=false
DEBUG=false
host=youtube # XXX: hack until multiple hosts works reliably

CONFIG="${XDG_CONFIG_HOME:-"$HOME/.config"}/ytmp"
if [[ -f "$CONFIG/ytmp.conf" ]]; then
    CONFPATH="$CONFIG/ytmp.conf"
else
    CONFPATH="/etc/ytmp.conf"
fi
. "$CONFPATH"


isSet() {
    [[ -z ${!1} ]] && echo "$1 is not set in $CONFPATH" && exit 1
}

OPTS=(GUI PLAYER DWN YTQUAL)
for i in "${OPTS[@]}"; do
    isSet "$i"
done

ytplay() {
  echo "[ytmpc] Now playing: ($host) $title"
  $PLAYER "$vidurl" > /dev/null 2>&1
}

ytdownload() {
  echo "[ytmpc] Now downloading: ($host) $title"
  case $host in
    "youtube") youtube-dl -o "${DWN:-$HOME}/%(stitle)s.%(ext)s" "$id";;
    "vimeo") wget -O "${DWN:-$HOME}/$title.flv" "$vidurl";;
  esac
}

ytdlandplay() {
  case $host in
    "youtube") local log="/tmp/youtube-dl.log"
               ytdownload | tee "$log" &
               vidurl="$(grep -F Destination "$log" | awk '{print $3}')";;
    "vimeo") ytdownload &
             vidurl="${DWN:-$HOME}/$title.flv" 
  esac
  sleep 3
  while ! [ -f "$vidurl" ] ; do sleep 3; done
  ytplay &
}

##
# A generic framework for GUI's that provide a choice from multiple selections.
#
# param $1  A choice string. Defaults: "View in mplayer".
# param $2  A "play" string. Defaults: "View in mplayer".
# param $3  A "download" string. Defaults: "Download".
#
playText="View in mplayer"
dwnText="Download"
parseGUIChoice()
{
  [[ $2 ]] || set "$1" "$playText"
  [[ $3 ]] || set "$1" "$2" "$dwnText"

  case "$1" in
    "$2") ytplay &;;
    "$3") ytdownload &;;
    "$2|$3") ytdlandplay &;;
  esac
}

_zenity() {
  title="${title//&/&amp;}" # zenity requires ampersand characters to be escaped
  choice=$(zenity --list --checklist --text="$title" --hide-header \
             --column="1" --column="2" TRUE "$playText" FALSE "$dwnText")
  parseGUIChoice "$choice"
}

_kdialog() {
  choice=$(kdialog --checklist "$title" 1 "$playText" on 2 "$dwnText" off)
  parseGUIChoice "$choice" '"1" ' '"2" '
}

_dmenu() {
  choice=$(echo -e "$playText\n$dwnText" | dmenu -i)
  parseGUIChoice "$choice"
}

parsevimeo() {
# based on video-dl by Vitaly Minko
# http://ossguy.com/?p=172
  local video_xml=$(wget -q -O - "http://www.vimeo.com/moogaloop/load/clip:$id") 
  local signature=$(echo $video_xml | \
    sed -e 's/^.*<request_signature>\([^<]*\)<.*$/\1/g')
  local signature_expires=$(echo $video_xml | \
    sed -e 's/^.*<request_signature_expires>\([^<]*\)<.*$/\1/g')
  title=$(echo $video_xml | \
    sed -e 's/^.*locked> <video> <caption>\([^<]*\)<.*$/\1/')
  vidurl="http://www.vimeo.com/moogaloop/play/clip:$id/$signature/$signature_expires/?q=sd"
}

lastid=""
rm /tmp/ytmpvars 2>/dev/null
while(true); do
  if [[ -f /tmp/ytmdurls ]]; then  
    #tail -n 2 /tmp/ytmdurls > /tmp/ytmpvars
    #source /tmp/ytmpvars
    id=$(tail -n 1 /tmp/ytmdurls)
    host=youtube
    if [[ "$id" != "$lastid" ]]; then
      case "$host" in
        "youtube")
          $VERBOSE && echo "[ytmpc] (Youtube) video found. Getting title..."
          title="$(youtube-dl -e -- "$id")"
          $DEBUG && echo "[debug] title = $title"
          $VERBOSE && echo "[ytmpc] (Youtube) Getting video URL..."
          vidurl="$(youtube-dl --max-quality="$YTQUAL" -g -- "$id")"
          $DEBUG && echo "[debug] vidurl = $vidurl"
        ;;
        "vimeo") parsevimeo;; 
      esac
      case "$GUI" in
        "none") ytplay &;;
        "zenity") _zenity;;
        "kdialog") _kdialog;;
        "dmenu") _dmenu;;
      esac
    fi
    lastid="$id"
  fi
  sleep 1
done

